//
//  XinHuaAppDelegate.m
//  XinHuaDailyXib
//
//  Created by zhang jun on 12-5-19.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "XinHuaAppDelegate.h"
#import "WelcomeViewController.h"
#import "XinHuaViewController.h"
#import "NewsListViewController.h"
#import "NewsDownLoadZipWorkTask.h"
#import "NewsDbOperator.h"
#import "UserDefaultManager.h"
#import "NewsXmlParser.h"
#import "ExpressNotificationViewController.h"
#import "RegisterViewController.h"
#import "NewsDefine.h"
#define KSQLFile @"news.sqlite"

@implementation XinHuaAppDelegate

@synthesize window = _window;
@synthesize viewController = _viewController;
@synthesize db = _db;
@synthesize netWorkTask=_netWorkTask;


- (void)dealloc
{
    [_window release];
    [_viewController release];
    [super dealloc];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    
//    [[UIApplication sharedApplication]  registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert)];
    [[UIApplication sharedApplication] 
     setStatusBarStyle:UIStatusBarStyleBlackTranslucent animated:NO];
    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];

//    [self.viewController GetdatafromWebToDb];
    if([[NSUserDefaults standardUserDefaults]  dictionaryForKey:@"CELLBYTES"]==nil){
    NSDictionary *byteslostDic=[[NSDictionary alloc] initWithObjectsAndKeys:@"0",@"0",@"0",@"1",@"0",@"2",@"0",@"3",@"0",@"4",@"0",@"5",@"0",@"6",@"0",@"7",@"0",@"8",@"0",@"9",@"0",@"10",@"0",@"11",@"0",@"12",nil];
    [[NSUserDefaults standardUserDefaults] setObject:byteslostDic forKey:@"CELLBYTES"];
        [byteslostDic release];
    }
    if([[NSUserDefaults standardUserDefaults]  dictionaryForKey:@"WIFIBYTES"]==nil){
        NSDictionary *byteslostDic=[[NSDictionary alloc] initWithObjectsAndKeys:@"0",@"0",@"0",@"1",@"0",@"2",@"0",@"3",@"0",@"4",@"0",@"5",@"0",@"6",@"0",@"7",@"0",@"8",@"0",@"9",@"0",@"10",@"0",@"11",@"0",@"12",nil];
        [[NSUserDefaults standardUserDefaults] setObject:byteslostDic forKey:@"WIFIBYTES"];
        [byteslostDic release];
    }
    
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
	NSString *dcoumentpath = ([paths count] > 0)? [paths objectAtIndex:0] : nil;
    NSString*  dbpath = [NSString stringWithFormat:@"%@/%@",dcoumentpath,KSQLFile];
    [self bindphone];
    self.db = [[[NewsDbOperator alloc] initWithFile:dbpath] autorelease];
    // Override point for customization after application launch.
    
    self.netWorkTask=[[[NewsDownLoadZipWorkTask alloc]init] autorelease];
    self.netWorkTask.delegate=self; 
    
    NSArray *pathf=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *pathnew=[pathf objectAtIndex:0];
    NSString *dirname = [pathnew stringByAppendingFormat:@"/favorDir"];
    [[NSFileManager defaultManager] createDirectoryAtPath:dirname withIntermediateDirectories:YES attributes:nil error:nil];

    


    
    if (launchOptions) {   
        
        //截取apns推送的消息

        NSDictionary* pushInfo = [launchOptions objectForKey:@"UIApplicationLaunchOptionsRemoteNotificationKey"];   
        NSLog(@"pushInfo %@",pushInfo);
        //获取推送详情        
        self.viewController=[[[XinHuaViewController alloc] init] autorelease];
        UINavigationController* unc = [[UINavigationController alloc] initWithRootViewController:self.viewController];
        self.window.rootViewController=unc;
        [unc release];
        [self.window makeKeyAndVisible];
        
        ExpressNotificationViewController *aExpressController = [[[ExpressNotificationViewController alloc] init] autorelease];
        aExpressController.item_id=[pushInfo objectForKey:@"id"];
        [self.window.rootViewController presentModalViewController:aExpressController animated:YES];
    }else{
        WelcomeViewController *aController=[[[WelcomeViewController alloc] init] autorelease];
        self.viewController=[[[XinHuaViewController alloc] init] autorelease];
        aController.app=self;
        aController.mainViewController=self.viewController;
        self.window.rootViewController=aController;
        [self.window makeKeyAndVisible];
    }
    
    
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
     */
        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    [[NSNotificationCenter defaultCenter] postNotificationName: KEnterForeground
     object: self];
    if([[NSUserDefaults standardUserDefaults] valueForKey:KUserDefaultAuthCode]==nil){
      [self bindphone];
    }
    [self.viewController update];    
    [self.viewController GetdatafromWebToDb];    
    [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
//    [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
//    ExpressNotificationViewController *aController = [[[ExpressNotificationViewController alloc] init] autorelease];
//    aController.item_id=[userInfo objectForKey:@"id"];
//    [self.viewController presentModalViewController:aController animated:YES];
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    /*
     Called when the application is about to terminate.
     Save data if appropriate.
     See also applicationDidEnterBackground:.
     */
}

- (void)bindSN{    
    NSString*  authCode =@"4";
    NSString* regUrl = [NSString stringWithFormat:KBindleSNUrl,[UIDevice customUdid],authCode];
    regUrl = [regUrl trimSpaceAndReturn];
    NSLog(@"reg = %@",regUrl);
    ASIHTTPRequest* request = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:regUrl]];
    [request setCompletionBlock:^{
        
        NSData*   responseData = [request responseData];
        NSString *responseString = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
        NSLog(@"responseString = %@",responseString);
        [responseString release];
        [request release];
    }];
    [request setFailedBlock:^{
        NSLog(@"responseString = %@",[request.error localizedDescription]);
        [request release];
    }];
    [request startAsynchronous];
}

- (void)uploadToken:(NSString*)token
{
    NSString* oldToken = [[UserDefaultManager sharedInstance] stringForKey:KUserToken defaultValue:NO];
    if (oldToken.length > 0 && [oldToken isEqualToString:token]) 
    {
        return;
    }

    NSString* url = [NSString stringWithFormat:KUploadTokenUrl,[UIDevice customUdid],token];
    NSLog(@"upload Token :%@",url);
    ASIHTTPRequest* request = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:url]];
    [request setCompletionBlock:^{
        NSLog(@"uploadToken = %@",[request responseString]);
        [[UserDefaultManager sharedInstance]  setString:token forKey:KUserToken];
        [request release];
    }];
    [request setFailedBlock:^{
        NSError *error = [request error];
        NSLog(@"error = %@",[error localizedDescription]);
        [request release];
    }];
    [request startAsynchronous];
}

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    NSString *token = [[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"<>"]];
	token = [token stringByReplacingOccurrencesOfString:@" " withString:@""];
	NSLog(@"deviceToken: %@",token);   
    if (token.length > 0)
    {
        [self uploadToken:token];
    }
    
} 
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error 
{
	NSLog(@"%@",@"注册通知失败！！！！！！！！！");
    NSString *status = [NSString stringWithFormat:@"%@\nRegistration failed.\n\nError: %@", [[UIApplication sharedApplication] enabledRemoteNotificationTypes] ?
                        @"Notifications were active for this application" :
                        @"Remote notifications were not active for this application", [error localizedDescription]];
    
    NSLog(@"Error in registration. Error: %@", error); 
	NSLog(@"status = %@",status);
    NSLog(@"%@",@"注册通知失败！！！！！！！！！");
} 

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    NSLog(@"didReceiveRemoteNotification: %@", userInfo);
 
// if([userInfo objectForKey:@"id"])     [self loadNewsFromWeb:[userInfo objectForKey:@"id"]];
    if(application.applicationState == UIApplicationStateActive)
    {//前台
        [self loadNewsFromWeb:[userInfo objectForKey:@"id"]];
    }else{
       ExpressNotificationViewController *aController = [[[ExpressNotificationViewController alloc] init] autorelease];
       aController.item_id=[userInfo objectForKey:@"id"];
       [self.viewController presentModalViewController:aController animated:YES];
    }

}
-(void)showExpress:(NSString *)item_id{
    
}
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
	NSLog(@"didReceiveLocalNotification: %@", notification);
}

-(void)bindphone{
    NSString *bindphone_url=[NSString stringWithFormat:KBindlePhoneUrl,[UIDevice customUdid],@"ios5.0"];
    NSLog(@"bindphone_url = %@",bindphone_url);
    ASIHTTPRequest* request = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:bindphone_url]];
    [request setCompletionBlock:^{
        NSString *responseString = [request responseString];
        NSLog(@"bindphone_url_responseString = %@",responseString);
        NSRange range=[responseString rangeOfString:@"OLD"];
        if(range.location!=NSNotFound){        
            if(responseString.length>3){
                NSLog(@"%@",[responseString substringFromIndex:4]);
                NSString *snStr=[responseString substringFromIndex:4];
                [[UserDefaultManager sharedInstance]  setString:snStr  forKey:KUserDefaultAuthCode];
            }
        }else{
            //
        }
        [[UserDefaultManager sharedInstance]  setString:@"imei" forKey:KUserToken];
        //[self bindSN];
        [request release];
    }];
    [request setFailedBlock:^{
        NSError *error = [request error];
        NSLog(@"error = %@",[error localizedDescription]);
        [request release];
    }];
    [request startAsynchronous];
}

-(void)loadNewsFromWeb:(NSString *)item_id{
    NSString*  itemurl =  [NSString stringWithFormat:KXdailyUrlOnlyOne,item_id];
    NSLog(@"itemurl = %@",itemurl);
    ASIHTTPRequest* myrequest = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:itemurl]];
    myrequest.defaultResponseEncoding = NSUTF8StringEncoding;
    [myrequest setCompletionBlock:^{
        NSString *responseString = [myrequest responseString];       
        XDailyItem * xdaily = [NewsXmlParser ParseXDailyItem:responseString];
        xdaily.item_id=item_id;
        NSLog(@"loadNewsFromWeb  response %@",responseString);
        [self.netWorkTask addTask:xdaily];
        [myrequest release];
        
    }];
    
    [myrequest setFailedBlock:^{
        NSError *error = [myrequest error];
        NSLog(@"error = %@",[error localizedDescription]);
        [myrequest release];
    }];
    [myrequest startAsynchronous];
}

-(void)NewsDownloadFileCompleted:(XDailyItem*) item{
//    NSLog(@"NewsDownloadFileCompletedCallBack  %@",item.pageurl);
//    NSString* path_url = [item.zipurl stringByReplacingOccurrencesOfString:@"\\" withString:@"/"];   
//    NSString* url=[item.pageurl stringByReplacingOccurrencesOfString:@"\\" withString:@"/"]; 
//    NSString* filename=[url lastPathComponent];
//    NSString* dirName = [path_url lastPathComponent];
//    NSString* filePath =[[CommonMethod fileWithDocumentsPath:dirName] stringByDeletingPathExtension];    
//    NSString* urlStr=[NSString stringWithFormat:@"%@/%@",[filePath stringByDeletingPathExtension],filename];  
//    item.isRead  = YES;
//    [self.db ModifyDailyNews:item];
//    [self.db SaveDb];
    NSLog(@"NewsDownloadFileCompleted %@",item.item_id);

    [self.viewController update];
}
-(void)NewsDownloadFileErrCallBack:(XDailyItem*) item{

    
}
-(void)AllZipFinished{
}
@end
