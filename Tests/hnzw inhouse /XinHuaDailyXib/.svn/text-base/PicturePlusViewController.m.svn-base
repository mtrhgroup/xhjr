//
//  PicturePlusViewController.m
//  XinHuaDailyXib
//
//  Created by apple on 12-6-28.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "PicturePlusViewController.h"
#import "PictureNews.h"
#import "XinHuaAppDelegate.h"
#import "NewsDbOperator.h"
@implementation PicturePlusViewController
@synthesize previousWebView;
@synthesize nextWebView;
@synthesize topWebView;
@synthesize waitingView;
@synthesize indicator;
@synthesize siblings;
@synthesize baseURL;
@synthesize type;
@synthesize index;
@synthesize channel_title;
@synthesize delegate;
@synthesize newslist;
UIButton * favor_yes_btn;
UIButton * favor_no_btn;
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    [previousWebView release];
    [nextWebView release];
    [topWebView release];
    [waitingView release];
    [indicator release];
    [siblings release];
    [baseURL release];
    [type release];
    [channel_title release];
    [delegate release];
    [newslist release];
    [favor_yes_btn release];
    [favor_no_btn release];
    // Release any retained subviews of the main view.
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.navigationController.navigationBar.hidden = YES;
    
    //UIwebView
    previousWebView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 44, 320, 416)];
    nextWebView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 44, 320, 416)];
    topWebView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 44, 320, 416)];
    for (UIView* sv in [self.previousWebView subviews])        
    {      
        for (UIView* s2 in [sv subviews])            
        {                      
            for (UIGestureRecognizer *recognizer in s2.gestureRecognizers) {
                if ([recognizer isKindOfClass:[UILongPressGestureRecognizer class]]){                    
                    recognizer.enabled = NO;                    
                }                
            }
        }        
    }
    for (UIView* sv in [self.nextWebView subviews])        
    {       
        for (UIView* s2 in [sv subviews])            
        {                      
            for (UIGestureRecognizer *recognizer in s2.gestureRecognizers) {
                if ([recognizer isKindOfClass:[UILongPressGestureRecognizer class]]){                    
                    recognizer.enabled = NO;                    
                }                
            }
        }        
    }
    for (UIView* sv in [self.topWebView subviews])        
    {    
        for (UIView* s2 in [sv subviews])            
        {                       
            for (UIGestureRecognizer *recognizer in s2.gestureRecognizers) {
                if ([recognizer isKindOfClass:[UILongPressGestureRecognizer class]]){                    
                    recognizer.enabled = NO;                    
                }                
            }
        }        
    }
    self.topWebView.delegate=self;
    self.previousWebView.delegate=self;
    self.nextWebView.delegate=self;
    
    UISwipeGestureRecognizer* leftGest = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftAction:)];
    [leftGest setDirection:(UISwipeGestureRecognizerDirectionLeft)]; 
    
    UISwipeGestureRecognizer* rightGest = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightAction:)];
    [rightGest setDirection:(UISwipeGestureRecognizerDirectionRight)];
    
    UISwipeGestureRecognizer* leftGest2 = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftAction:)];
    [leftGest2 setDirection:(UISwipeGestureRecognizerDirectionLeft)]; 
    
    UISwipeGestureRecognizer* rightGest2 = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightAction:)];
    [rightGest2 setDirection:(UISwipeGestureRecognizerDirectionRight)];
    
    UISwipeGestureRecognizer* leftGest3 = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeLeftAction:)];
    [leftGest3 setDirection:(UISwipeGestureRecognizerDirectionLeft)]; 
    
    UISwipeGestureRecognizer* rightGest3 = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeRightAction:)];
    [rightGest3 setDirection:(UISwipeGestureRecognizerDirectionRight)];
    
    
    
    [previousWebView addGestureRecognizer:leftGest];
    [leftGest release];
    [previousWebView addGestureRecognizer:rightGest];
    [rightGest release];
    
    [nextWebView addGestureRecognizer:leftGest2];
    [leftGest2 release];
    [nextWebView addGestureRecognizer:rightGest2];
    [rightGest2 release];
    
    [topWebView addGestureRecognizer: leftGest3];
    [leftGest3 release];
    [topWebView addGestureRecognizer:rightGest3];
    [rightGest3 release];
    
    [self.view addSubview:previousWebView];
    [self.view addSubview:nextWebView];
    [self.view addSubview:topWebView];
    
    UIImageView* bimgv = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];
    bimgv.userInteractionEnabled = YES;
    bimgv.image = [UIImage imageNamed:@"titlebg.png"];
    UIButton* butb = [[UIButton alloc] initWithFrame:CGRectMake(5, 5, 35, 35)];
    butb.showsTouchWhenHighlighted=YES;
    [butb addTarget:self action:@selector(backAction:) forControlEvents:UIControlEventTouchUpInside];
    [butb setBackgroundImage:[UIImage imageNamed:@"backheader.png"] forState:UIControlStateNormal];
    [bimgv addSubview:butb];
    [butb release];
    
    UILabel* lab = [[UILabel alloc] initWithFrame:CGRectMake(100, 0, 120, 40)];
    [self.view addSubview:lab];
    lab.text = self.channel_title;
    lab.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:20];
    lab.textAlignment = UITextAlignmentCenter;
    lab.backgroundColor = [UIColor clearColor];
    lab.textColor = [UIColor whiteColor];
    [bimgv addSubview:lab];
    [lab release];
    
    favor_no_btn = [[UIButton alloc] initWithFrame:CGRectMake(276, 5, 33,33)];     
    UIImage *favor_no_image=[UIImage imageNamed:@"favor_pressed.png"];
    [favor_no_btn setImage:favor_no_image forState:UIControlStateNormal];
    [favor_no_btn  addTarget:self action:@selector(colect:) forControlEvents:UIControlEventTouchUpInside];
    favor_no_btn.hidden=YES;
    [bimgv addSubview:favor_no_btn];
    
    favor_yes_btn = [[UIButton alloc] initWithFrame:CGRectMake(276, 5, 33,33)];     
    UIImage *favor_yes_image=[UIImage imageNamed:@"favor_normal.png"];
    [favor_yes_btn setImage:favor_yes_image forState:UIControlStateNormal];
    [favor_yes_btn  addTarget:self action:@selector(colect:) forControlEvents:UIControlEventTouchUpInside];
    favor_yes_btn.hidden=YES;
    [bimgv addSubview:favor_yes_btn];
    
    [self.view addSubview:bimgv];
    [bimgv release];
    
    [self makeWaitingView];
    NSLog(@"subview___%@",self.view.subviews);
    [[self.view.subviews objectAtIndex:2] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_current_news]]]];
    [[self.view.subviews objectAtIndex:0] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_previous_news]]]];
    [[self.view.subviews objectAtIndex:1] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_next_news]]]]; 
    
    
    //判断是否收藏过

    
    
    //初始化收藏夹
    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *path=[paths objectAtIndex:0];  
    NSString *filename=[path stringByAppendingPathComponent:@"fav.plist"];   //获取路径
    NSFileManager* fm = [NSFileManager defaultManager];   
    if ( [fm fileExistsAtPath:filename] == NO) {
        [fm createFileAtPath:filename contents:nil attributes:nil];  //创建一个plist文件
        NSLog(@"create file !");
    }
    


	// Do any additional setup after loading the view.
}
-(void)backAction:(id)sender{
    [self.navigationController popViewControllerAnimated:YES];
}
-(void)makeWaitingView{
    waitingView=[[UIView alloc] initWithFrame:CGRectMake(0, 44, 320, 460)];
    waitingView.backgroundColor=[UIColor colorWithWhite:1 alpha:1];
    waitingView.hidden=true;
    indicator=[[UIActivityIndicatorView alloc] initWithFrame:CGRectMake(150, 100, 32, 32)];
    [indicator setActivityIndicatorViewStyle:UIActivityIndicatorViewStyleGray];
    UIImageView *imageView=[[UIImageView alloc]initWithFrame:CGRectMake(40, 150, 231, 65)];
    imageView.image=[UIImage imageNamed:@"logo.png"];
    [waitingView addSubview:imageView];
    [imageView release];
    [waitingView addSubview:indicator];
    [self.view addSubview:waitingView];   
}
-(void)showWaitingView{
    [indicator startAnimating];
    waitingView.hidden=false;
}
-(void)hideWaitingView{
    [indicator stopAnimating];
    waitingView.hidden=true;
}
-(NSURL *)makeURLwith:(PictureNews *)item{
     return  [NSURL fileURLWithPath:item.articel_url];
}



- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

- (void)dealloc {
    [previousWebView release];
    [nextWebView release];
    [topWebView release];
    [super dealloc];
}
- (void)swipeLeftAction:(id)sender {
    NSLog(@"%@",@"swipeLeftAction");
    NSLog(@"%@",[[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.title"]);
    CATransition *animation = [CATransition animation];
    //animation.delegate = self;
    animation.duration = 0.5f;
    animation.timingFunction = UIViewAnimationCurveEaseInOut;
	animation.fillMode = kCAFillModeForwards;
	animation.type = kCATransitionReveal;
	animation.subtype = kCATransitionFromRight;	
	[self.view.layer addAnimation:animation forKey:@"animation"];
	[self.view exchangeSubviewAtIndex:2 withSubviewAtIndex:1];
	[UIView commitAnimations]; 
    if([self iscollected]==true){
        [self setFavorBtnStatus:true];
    }else{
        [self setFavorBtnStatus:false];
    }  
    [self moveDownIndex];
    
    [[self.view.subviews objectAtIndex:0] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_previous_news]]]];
    [[self.view.subviews objectAtIndex:1] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_next_news]]]];
}

- (void)swipeRightAction:(id)sender {
    NSLog(@"%@",@"swipeRightAction");
    NSLog(@"%@",[[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.title"]);
    CATransition *animation = [CATransition animation];
    //animation.delegate = self;
    animation.duration = 0.5f;
    animation.timingFunction = UIViewAnimationCurveEaseInOut;
	animation.fillMode = kCAFillModeForwards;
	animation.type = kCATransitionMoveIn;
	animation.subtype = kCATransitionFromLeft;	
	[self.view.layer addAnimation:animation forKey:@"animation"];
    [self.view exchangeSubviewAtIndex:2 withSubviewAtIndex:0];
    [UIView commitAnimations];
    if([self iscollected]==true){
        [self setFavorBtnStatus:true];
    }else{
        [self setFavorBtnStatus:false];
    }  
    [self moveUpIndex];
    [[self.view.subviews objectAtIndex:0] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_previous_news]]]];
    [[self.view.subviews objectAtIndex:1] loadRequest:[NSURLRequest requestWithURL:[self makeURLwith:[self get_next_news]]]];
}
-(int)moveDownIndex{
    if(self.index==[self.siblings count]-1){
        index=0;
    }else{
        index++;
    }
    return index;
}
-(int)moveUpIndex{
    if(self.index==0){
        index=[self.siblings count]-1;
    }else{
        index--;
    }
    return index;
}
-(PictureNews *)get_current_news{
    return [self.siblings objectAtIndex:index];
}
-(PictureNews *)get_previous_news{
    if(index==0){
        return [self.siblings objectAtIndex:[self.siblings count]-1]; 
    }
    else{
        return [self.siblings objectAtIndex:index-1]; 
    }
    return nil;
}
-(PictureNews *)get_next_news{
    if(index==[self.siblings count]-1)return [self.siblings objectAtIndex:0];
    else return [self.siblings objectAtIndex:index+1];
    return nil;
}

- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error
{
    
}
- (BOOL)webView:(UIWebView *)webView2 shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {            
    [self showWaitingView];
    return  YES;
}

- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    [self hideWaitingView];   
    if([self iscollected]){
        [self setFavorBtnStatus:true];
    }else {
        [self setFavorBtnStatus:false];
    } 
    NSString *strFontSize=[[NSUserDefaults standardUserDefaults] objectForKey:@"FONTSIZE"];
    if([strFontSize isEqualToString:@"大"]){
        [webView stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '150%'"]; 
    }else if([strFontSize isEqualToString:@"中"]){
        [webView stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '100%'"]; 
    }else if([strFontSize isEqualToString:@"小"]){
        [webView stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '50%'"]; 
    } 
}
-(int)getIndexOfNewslistWith:(NSString *)str{
    int ind=-1;
    for(int i=0;i<[self.newslist count];i++){
        if([[self.newslist objectAtIndex:i] isEqualToString:str]){
            ind=i;
            break;
        }
    }
    return ind;
}

- (void)colect:(id)sender {
    NSLog(@"colect...colect");
    //当点击收藏的时候保存   
    if([self iscollected]){
        [self removeArticle];
        [self setFavorBtnStatus:false];
    }else {
        [self saveArticle]; 
        [self setFavorBtnStatus:true];
    }      
}


-(BOOL)iscollected{
    NSString *articleTitle = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.title"];
    NSLog(@"articleTitle %@",articleTitle);
    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *path=[paths objectAtIndex:0];  
    NSString *filename=[path stringByAppendingPathComponent:@"fav.plist"];   //获取路径
    NSMutableDictionary* dict = nil;
    dict = [[ NSMutableDictionary alloc ] initWithContentsOfFile:filename];
    id result = [dict objectForKey: articleTitle]; 
    [dict release];
    if (result != nil) {  
        return true;        
    }else{
        return false;   
    }
}


-(void)setFavorBtnStatus:(bool)collected{
    if(collected){
        favor_yes_btn.hidden=NO;
        favor_no_btn.hidden=YES;
    }else{
        favor_yes_btn.hidden=YES;
        favor_no_btn.hidden=NO;  
    }          
}

-(void)saveArticle{
    NSString *currentURL = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.location.href"];
    NSString *articleTitle = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.title"];
    NSString *htmlStr = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.documentElement.innerHTML"];
    //NSString *head = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.head.innerHTML"];
    NSLog(@"head__%@",currentURL);
    NSLog(@"detailHTML___%@",htmlStr);
    
    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *path=[paths objectAtIndex:0];  
    NSString *filename=[path stringByAppendingPathComponent:@"fav.plist"];   //获取路径 
    NSLog(@"colect_filename_%@",filename);
    
    NSArray *pathf=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *pathnew=[pathf objectAtIndex:0];
    NSString *dirname = [pathnew stringByAppendingFormat:@"/favorDir"];
    
    NSMutableDictionary* dict = nil;
    
    dict = [[ NSMutableDictionary alloc ] initWithContentsOfFile:filename];
    
    if (dict == nil) {
        dict = [[NSMutableDictionary alloc] initWithCapacity:10];
    }
    
    NSString*  timeStr =  [NSString stringWithFormat:@"%qu",[[NSDate date] timeIntervalSince1970]];
    NSString* tempFile = [NSString stringWithFormat:@"%@%d.htm",timeStr,rand()*100];
    NSString* contFileName = [NSString stringWithFormat:@"%@/%@",dirname,tempFile];
    
    NSFileManager* fm = [NSFileManager defaultManager];   
    if ( [fm fileExistsAtPath:contFileName] == NO) {
        [fm createFileAtPath:contFileName contents:nil attributes:nil];  //创建一个存储文件
        NSLog(@"create file !");
    }    
    [htmlStr writeToFile:contFileName atomically:YES encoding:NSUTF8StringEncoding error:nil];
    [dict setObject:contFileName forKey:articleTitle];  
    
    if ( [dict writeToFile:filename atomically:YES]) {
        NSLog(@"NEWS_contetn_datailHtml_收藏成功");
    }else{
        NSLog(@"NEWS_contetn_datailHtml__收藏失败");
    }
    [dict release];
    
    //创建img文件夹 保存css
    
    NSArray *pathab=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *pathabnew=[pathab objectAtIndex:0];
    NSString *imgDirName = [pathabnew stringByAppendingFormat:@"/favorDir/Img"];
    if ( ![fm fileExistsAtPath:imgDirName] ) {
        [fm createDirectoryAtPath:imgDirName withIntermediateDirectories:NO attributes:nil error:nil];
    }
    
    NSString *cssFileName = [imgDirName stringByAppendingFormat:@"/css.css"];
    if (![fm fileExistsAtPath:cssFileName]) {
        [fm createFileAtPath:cssFileName contents:nil attributes:nil];
    }
    
    //保存css文件
    NSString *ccsFileURL;
    NSString* cssCont;
    if([currentURL rangeOfString:@"http"].location!=NSNotFound){
        ccsFileURL=[[currentURL stringByDeletingLastPathComponent] stringByAppendingString:@"/Img/css.css"];
        cssCont = [NSString stringWithContentsOfURL:[NSURL URLWithString:ccsFileURL] encoding:NSUTF8StringEncoding error:nil];
    }else{
        NSString *dirStr=[[currentURL substringToIndex:[currentURL rangeOfString:[currentURL lastPathComponent]].location] substringFromIndex:[currentURL rangeOfString:path].location];
        ccsFileURL=[dirStr stringByAppendingString:@"/Img/css.css"];
        cssCont = [NSString stringWithContentsOfURL:[NSURL fileURLWithPath:ccsFileURL] encoding:NSUTF8StringEncoding error:nil];
    }
    [cssCont writeToFile:cssFileName atomically:YES encoding:NSUTF8StringEncoding error:nil];
    
    
    
    //创建imags文件夹
    NSArray *pathabc=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *pathabnewd=[pathabc objectAtIndex:0];
    NSString *imgDirNames = [pathabnewd stringByAppendingFormat:@"/favorDir/Imgs"];
    if ( ![fm fileExistsAtPath:imgDirNames] ) {
        [fm createDirectoryAtPath:imgDirNames withIntermediateDirectories:NO attributes:nil error:nil];
    }
    
    //找出所有的图片名称    
    
    NSString *urls=[[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('img').length"];
    int urls_length=[urls intValue];
    for(int i=0;i<urls_length;i++){
        NSString *imgURLStr=[[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@"document.getElementsByTagName('img')[%d].getAttribute(\"src\")",i]];
        NSData *data;
        if([currentURL rangeOfString:@"http"].location!=NSNotFound){
            NSString *imgFileURL=[[currentURL stringByDeletingLastPathComponent] stringByAppendingString:[NSString stringWithFormat:@"%@%@",@"/",imgURLStr]]; 
            NSLog(@"imgFileURL %@",imgFileURL);
            data=[NSData dataWithContentsOfURL:[NSURL URLWithString:imgFileURL]];
        }else{
            NSString *dirStr=[[currentURL substringToIndex:[currentURL rangeOfString:[currentURL lastPathComponent]].location] substringFromIndex:[currentURL rangeOfString:path].location];
            NSString *imgFileURL=[dirStr stringByAppendingString:imgURLStr]; 
            data=[NSData dataWithContentsOfURL:[NSURL fileURLWithPath:imgFileURL]];
            
        }
        NSString *tofilename=[imgDirNames stringByAppendingString:[@"/" stringByAppendingString: [imgURLStr lastPathComponent]]];
        [data writeToFile:tofilename atomically:YES];
    }
    [self.delegate update];
}

-(void)removeArticle{
    NSString *currentURL = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.location.href"];
    NSString *articleTitle = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.title"];
    NSString *htmlStr = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.documentElement.innerHTML"];
    //NSString *head = [[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.head.innerHTML"];
    NSLog(@"head__%@",currentURL);
    NSLog(@"detailHTML___%@",htmlStr);
    
    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *path=[paths objectAtIndex:0];  
    NSString *filename=[path stringByAppendingPathComponent:@"fav.plist"];   //获取路径 
    NSLog(@"colect_filename_%@",filename);
    
    NSArray *pathf=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
    NSString *pathnew=[pathf objectAtIndex:0];
    NSString *dirname = [pathnew stringByAppendingFormat:@"/favorDir"];
    
    NSMutableDictionary* dict = nil;
    
    dict = [[ NSMutableDictionary alloc ] initWithContentsOfFile:filename];
    
    if (dict == nil) {
        dict = [[NSMutableDictionary alloc] initWithCapacity:10];
    }
    
    NSString*  timeStr =  [NSString stringWithFormat:@"%qu",[[NSDate date] timeIntervalSince1970]];
    NSString* tempFile = [NSString stringWithFormat:@"%@%d.htm",timeStr,rand()*100];
    NSString* contFileName = [NSString stringWithFormat:@"%@/%@",dirname,tempFile];
    [[NSFileManager defaultManager] removeItemAtPath:contFileName error:nil];
    [dict removeObjectForKey:articleTitle];
    
    if ( [dict writeToFile:filename atomically:YES]) {
        NSLog(@"NEWS_contetn_datailHtml_收藏成功");
    }else{
        NSLog(@"NEWS_contetn_datailHtml__收藏失败");
    }
    [dict release];
    //找出所有的图片名称    
    
    NSString *urls=[[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:@"document.getElementsByTagName('img').length"];
    int urls_length=[urls intValue];
    for(int i=0;i<urls_length;i++){
        NSString *imgURLStr=[[self.view.subviews objectAtIndex:2] stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@"document.getElementsByTagName('img')[%d].getAttribute(\"src\")",i]];
        NSArray *pathabc=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);
        NSString *pathabnewd=[pathabc objectAtIndex:0];
        NSString *imgDirNames = [pathabnewd stringByAppendingFormat:@"/favorDir/Imgs"];
        NSString *tofilename=[imgDirNames stringByAppendingString:[@"/" stringByAppendingString: [imgURLStr lastPathComponent]]];
        [[NSFileManager defaultManager] removeItemAtPath:tofilename error:nil];
    }
    [self.delegate update];
}

@end
